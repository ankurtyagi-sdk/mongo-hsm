#
# Copyright (c) 2023 by Delphix. All rights reserved.
#

# generated by fastapi-codegen:
#   filename:  load-api.yaml
#   timestamp: 2023-06-26T11:31:00+00:00

from __future__ import annotations

from typing import List, Union

from fastapi import FastAPI, Path
from pydantic import conint

from .models import (ApiVersion, Connector, ConnectorResponse, DataSet,
                     DataSetMapping, ExecutionStatus, Load, LoadResponse,
                     PostLoad, PostLoadResponse)

app = FastAPI(
    title="Delphix Hyperscale Load Service",
    version="v3.2.0",
    description="Delphix Hyperscale Load Service API",
    contact={
        "name": "Delphix Support",
        "url": "https://support.delphix.com",
        "email": "support@delphix.com",
    },
    servers=[{"url": "/api"}],
)


@app.get(
    "/api-version",
    response_model=ApiVersion,
    summary="Returns the API version of service",
    tags=["ApiVersion"],
)
def get_api_version() -> ApiVersion:
    """
    Returns the API version of service
    """
    pass


@app.post(
    "/connectors",
    response_model=None,
    summary="Create connector.",
    responses={"201": {"model": ConnectorResponse}},
    tags=["ConnectorManagement"],
)
def create_connector(body: Connector) -> Union[None, ConnectorResponse]:
    """
    Create connector.
    """
    pass


@app.get(
    "/connectors",
    response_model=List[ConnectorResponse],
    summary="Returns a list of connectors.",
    tags=["ConnectorManagement"],
)
def list_all_connector() -> List[ConnectorResponse]:
    """
    Returns a list of connectors.
    """
    pass


@app.get(
    "/connectors/{connector_id}",
    response_model=ConnectorResponse,
    summary="get connector by ID.",
    tags=["ConnectorManagement"],
)
def get_connector(
    connector_id: conint(ge=1) = Path(..., alias="connectorId")
) -> ConnectorResponse:
    """
    get connector by ID.
    """
    pass


@app.put(
    "/connectors/{connector_id}",
    response_model=ConnectorResponse,
    summary="Update an existing connector.",
    tags=["ConnectorManagement"],
)
def update_connector(
    connector_id: conint(ge=1) = Path(..., alias="connectorId"), body: Connector = ...
) -> ConnectorResponse:
    """
    Update an existing connector.
    """
    pass


@app.delete(
    "/connectors/{connector_id}",
    response_model=None,
    summary="Delete an existing connector.",
    tags=["ConnectorManagement"],
)
def delete_connector(
    connector_id: conint(ge=1) = Path(..., alias="connectorId")
) -> None:
    """
    Delete an existing connector.
    """
    pass


@app.post(
    "/data-sets",
    response_model=None,
    summary="Create DataSet.",
    responses={"201": {"model": DataSet}},
    tags=["DataSets"],
)
def create_data_set(body: DataSet) -> Union[None, DataSet]:
    """
    Create DataSet.
    """
    pass


@app.get(
    "/data-sets",
    response_model=List[DataSet],
    summary="Returns a list of DataSets.",
    tags=["DataSets"],
)
def list_all_data_set() -> List[DataSet]:
    """
    Returns a list of DataSets.
    """
    pass


@app.get(
    "/data-sets/job/{job_id}/validate",
    response_model=None,
    summary="Validate the constraints of table in target dataset related with foriegn key constraints.",
    tags=["DataSets"],
)
def validate_data_set_by_job_id(
    job_id: conint(ge=1) = Path(..., alias="jobId")
) -> None:
    """
    Validate the constraints of table in target dataset related with foriegn key constraints.
    """
    pass


@app.get(
    "/data-sets/mapping",
    response_model=List[DataSetMapping],
    summary="Returns a list of DataSet Mappings.",
    tags=["DataSets"],
)
def list_all_data_set_mapping() -> List[DataSetMapping]:
    """
    Returns a list of DataSet Mappings.
    """
    pass


@app.post(
    "/data-sets/mapping",
    response_model=None,
    summary="DataSet Job mapping.",
    responses={"201": {"model": DataSetMapping}},
    tags=["DataSets"],
)
def create_mapping_data_set_job(body: DataSetMapping) -> Union[None, DataSetMapping]:
    """
    DataSet Job mapping.
    """
    pass


@app.put(
    "/data-sets/mapping/{data_set_mapping_id}",
    response_model=DataSetMapping,
    summary="Update an existing mapping of DataSet with Job.",
    tags=["DataSets"],
)
def update_mapping_data_set_job(
    data_set_mapping_id: conint(ge=1) = Path(..., alias="dataSetMappingId"),
    body: DataSetMapping = ...,
) -> DataSetMapping:
    """
    Update an existing mapping of DataSet with Job.
    """
    pass


@app.get(
    "/data-sets/{data_set_id}",
    response_model=DataSet,
    summary="get DataSet by ID.",
    tags=["DataSets"],
)
def get_data_set(data_set_id: conint(ge=1) = Path(..., alias="dataSetId")) -> DataSet:
    """
    get DataSet by ID.
    """
    pass


@app.put(
    "/data-sets/{data_set_id}",
    response_model=DataSet,
    summary="Update an existing DataSet.",
    tags=["DataSets"],
)
def update_data_set(
    data_set_id: conint(ge=1) = Path(..., alias="dataSetId"), body: DataSet = ...
) -> DataSet:
    """
    Update an existing DataSet.
    """
    pass


@app.delete(
    "/data-sets/{data_set_id}",
    response_model=None,
    summary="Delete an existing DataSet.",
    tags=["DataSets"],
)
def delete_data_set(data_set_id: conint(ge=1) = Path(..., alias="dataSetId")) -> None:
    """
    Delete an existing DataSet.
    """
    pass


@app.get(
    "/executions/post-load/{execution_id}",
    response_model=PostLoadResponse,
    summary="Get the post load status of specific execution",
    tags=["Executions"],
)
def get_post_load_execution_status(
    execution_id: conint(ge=1) = Path(..., alias="executionId")
) -> PostLoadResponse:
    """
    Get the post load status of specific execution
    """
    pass


@app.delete(
    "/executions/{execution_id}",
    response_model=None,
    summary="Cleanup the existing load execution.",
    tags=["Executions"],
)
def clean_up_execution(
    execution_id: conint(ge=1) = Path(..., alias="executionId")
) -> None:
    """
    Cleanup the existing load execution.
    """
    pass


@app.get(
    "/executions/{execution_id}/status",
    response_model=LoadResponse,
    summary="Get status of specific execution",
    tags=["Executions"],
)
def get_execution_status(
    execution_id: conint(ge=1) = Path(..., alias="executionId")
) -> LoadResponse:
    """
    Get status of specific execution
    """
    pass


@app.put(
    "/executions/{execution_id}/status",
    response_model=None,
    summary="Update status of existing execution.",
    tags=["Executions"],
)
def update_execution_status(
    execution_id: conint(ge=1) = Path(..., alias="executionId"),
    body: ExecutionStatus = ...,
) -> None:
    """
    Update status of existing execution.
    """
    pass


@app.post(
    "/load",
    response_model=None,
    summary="Load API to load the multiple files to a target database table.",
    responses={"201": {"model": LoadResponse}},
    tags=["Loads"],
)
def load(body: Load) -> Union[None, LoadResponse]:
    """
    Load API to load the multiple files to a target database table.
    """
    pass


@app.post(
    "/load/post-load",
    response_model=None,
    summary="Post load API to execute the post load processing.",
    responses={"201": {"model": PostLoadResponse}},
    tags=["Loads"],
)
def post_load(body: PostLoad) -> Union[None, PostLoadResponse]:
    """
    Post load API to execute the post load processing.
    """
    pass


@app.post(
    "/load/post-load/restart",
    response_model=None,
    summary="Post load API to retrigger the post load processing.",
    responses={"201": {"model": PostLoadResponse}},
    tags=["Loads"],
)
def restart_post_load(body: PostLoad) -> Union[None, PostLoadResponse]:
    """
    Post load API to retrigger the post load processing.
    """
    pass
