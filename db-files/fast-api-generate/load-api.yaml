#
# Copyright (c) 2023 by Delphix. All rights reserved.
#

openapi: 3.0.0
info:
  title: Delphix Hyperscale Load Service
  version: 'v3.2.0'
  description: Delphix Hyperscale Load Service API
  contact:
    name: Delphix Support
    url: https://support.delphix.com
    email: support@delphix.com
servers:
  - url: '/api'

paths:
  /connectors/{connectorId}:
    parameters:
      - in: path
        name: connectorId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: The ID of the connector.
    get:
      tags:
        - ConnectorManagement
      summary: get connector by ID.
      operationId: get_connector
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ConnectorResponse'
    put:
      tags:
        - ConnectorManagement
      summary: Update an existing connector.
      operationId: update_connector
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: connector
              $ref: "#/components/schemas/Connector"
        description: The updated connector information.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ConnectorResponse'
    delete:
      tags:
        - ConnectorManagement
      summary: Delete an existing connector.
      operationId: delete_connector
      responses:
        '200':
          description: OK
  /connectors:
    post:
      tags:
        - ConnectorManagement
      summary: Create connector.
      operationId: create_connector
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: created_connector
              $ref: "#/components/schemas/Connector"
        description: The parameters to create an connector.
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ConnectorResponse'
    get:
      tags:
        - ConnectorManagement
      summary: Returns a list of connectors.
      operationId: list_all_connector
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorResponse'

  /data-sets/{dataSetId}:
    parameters:
      - in: path
        name: dataSetId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: The ID of the DataSet.
    get:
      tags:
        - DataSets
      summary: get DataSet by ID.
      operationId: get_data_set
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DataSet'
    put:
      tags:
        - DataSets
      summary: Update an existing DataSet.
      operationId: update_data_set
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: data_set
              $ref: "#/components/schemas/DataSet"
        description: The updated DataSet information.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DataSet'
    delete:
      tags:
        - DataSets
      summary: Delete an existing DataSet.
      operationId: delete_data_set
      responses:
        '200':
          description: OK
  /data-sets:
    post:
      tags:
        - DataSets
      summary: Create DataSet.
      operationId: create_data_set
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: created_data_set
              $ref: "#/components/schemas/DataSet"
        description: The parameters to create a DataSet.
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DataSet'
    get:
      tags:
        - DataSets
      summary: Returns a list of DataSets.
      operationId: list_all_data_set
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSet'

  /data-sets/mapping:
    get:
      tags:
        - DataSets
      summary: Returns a list of DataSet Mappings.
      operationId: list_all_data_set_mapping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSetMapping'
    post:
      tags:
        - DataSets
      summary: DataSet Job mapping.
      operationId: create_mapping_data_set_job
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: create_mapping_data_set_job
              $ref: "#/components/schemas/DataSetMapping"
        description: The parameters to map a DataSet with Job.
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DataSetMapping'
  /data-sets/mapping/{dataSetMappingId}:
    parameters:
      - in: path
        name: dataSetMappingId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: The ID of the DataSetMapping.
    put:
      tags:
        - DataSets
      summary: Update an existing mapping of DataSet with Job.
      operationId: update_mapping_data_set_job
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: update_mapping_data_set_job
              $ref: "#/components/schemas/DataSetMapping"
        description: The updated mapping of DataSet with Job.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DataSetMapping'
  /data-sets/job/{jobId}/validate:
    parameters:
      - in: path
        name: jobId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: Numeric ID of Job.
    get:
      tags:
        - DataSets
      summary: Validate the constraints of table in target dataset related with foriegn key constraints.
      operationId: validate_data_set_by_job_id
      responses:
        '200':
          description: OK
  /load:
    post:
      tags:
        - Loads
      summary: Load API to load the multiple files to a target database table.
      operationId: load
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: load
              $ref: "#/components/schemas/Load"
        description: The parameters to perform a bulk load.
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LoadResponse'

  /load/post-load:
    post:
      tags:
        - Loads
      summary: Post load API to execute the post load processing.
      operationId: post_load
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: postLoad
              $ref: "#/components/schemas/PostLoad"
        description: The parameters to perform a post load processing.
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PostLoadResponse'

  /load/post-load/restart:
    post:
      tags:
        - Loads
      summary: Post load API to retrigger the post load processing.
      operationId: restart_post_load
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: postLoad
              $ref: "#/components/schemas/PostLoad"
        description: The parameters to perform a post load processing.
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PostLoadResponse'

  /executions/{executionId}/status:
    parameters:
      - in: path
        name: executionId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: The execution Id.
    get:
      tags:
        - Executions
      summary: Get status of specific execution
      operationId: get_execution_status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LoadResponse'
    put:
      tags:
        - Executions
      summary: Update status of existing execution.
      operationId: update_execution_status
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: update_execution_status
              $ref: "#/components/schemas/ExecutionStatus"
        description: The update execution status.
        required: true
      responses:
        '200':
          description: Status updated.

  /executions/{executionId}:
    parameters:
      - in: path
        name: executionId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: ID of the load execution.
    delete:
      tags:
        - Executions
      summary: Cleanup the existing load execution.
      operationId: clean_up_execution
      responses:
        '200':
          description: OK

  /executions/post-load/{executionId}:
    parameters:
      - in: path
        name: executionId
        schema:
          type: integer
          format: int64
          minimum: 1
        required: true
        description: The execution Id.
    get:
      tags:
        - Executions
      summary: Get the post load status of specific execution
      operationId: get_post_load_execution_status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PostLoadResponse'
                
  /api-version:
    get:
      tags:
        - ApiVersion
      summary: Returns the API version of service
      operationId: get_api_version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Api-Version'
                
components:
  schemas:
    Connector:
      title: Connector
      description: A Hyperscale data connector.
      type: object
      required:
        - password
        - jdbc_url
        - user
      allOf:
        - $ref: "#/components/schemas/ConnectorResponse"
        - type: object
          properties:
            password:
              description: The password of this connector.
              type: string
              minLength: 1
              maxLength: 256
          example:
            password: password

    ConnectorResponse:
      title: ConnectorResponse
      description: A Hyperscale data connector response.
      type: object
      required:
        - jdbc_url
        - user
      properties:
        id:
          description: The Connector object entity ID.
          type: integer
          format: int64
          nullable: false
          readOnly: true
        jdbc_url:
          description: The jdbc_url of this connector.
          type: string
        user:
          description: The username of this connector.
          type: string
          minLength: 1
          maxLength: 256
        connection_properties:
          description: The optional additional properties of this connector.
          type: string
          additionalProperties:
            type: string
      example:
        id: 1
        jdbc_url: "jdbc:oracle:thin:@eng09.dev.delphix.com:1521/oracle_source_db"
        user: "user"
        connection_properties: {"db_key1": "value1",
                                "db_key2": "value2"}

    DataSet:
      title: DataSet
      type: object
      description: A Data Set containing information of connector id, mount filesystem id and data info.
      required:
        - mount_filesystem_id
        - connector_id
        - data_info
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        connector_id:
          description: ID of the registered Connector model.
          type: integer
          format: int64
        mount_filesystem_id:
          description: ID of the registered Mount Filesystem model.
          type: integer
          format: int64
        data_info:
          description: Array of multiple objects, each object providing the information like sourceKey, schema_name, table_name and STREAMSIZE.
          type: array
          minItems: 1
          maxItems: 10000
          items:
            type: object
            required:
              - source_key
              - schema_name
              - table_name
            properties:
              source_key:
                description: object providing the information like schema_name, table_name or file_name of the source datasource
                type: object
                additionalProperties:
                  type: string
              schema_name:
                description: schema name of the target datasource.
                type: string
                minLength: 1
              table_name:
                description: table name of the target datasource.
                type: string
                minLength: 1
              stream_size:
                description: The stream size to be used by sqlldr oracle utility which specifies the size (in bytes) of the data stream sent from the client to the server.
                type: integer
                format: int64
                default: 256000
              column_array_rows:
                description: The number of column array rows to be used by sqlldr oracle utility which determines the number of rows loaded before the stream buffer is built
                type: integer
                format: int64
                default: 20000
      example:
        connector_id: 1
        mount_filesystem_id: 1
        data_info:
          - source_key: {"schema_name": "SRC_TEST_SCHEMA_1",
                         "table_name": "SRC_TEST_TABLE_1"}
            schema_name: "TEST_SCHEMA_1"
            table_name: "TEST_TABLE_1"
            stream_size: 256000
            column_array_rows: 20000
          - source_key: {"schema_name": "SRC_TEST_SCHEMA_2",
                         "table_name": "SRC_TEST_TABLE_2"}
            schema_name: "TEST_SCHEMA_2"
            table_name: "TEST_TABLE_2"
            stream_size: 256000
            column_array_rows: 20000

    DataSetMapping:
      title: DataSetMapping
      type: object
      description: A Data Set Mapping containing information of job id and data set id.
      required:
        - data_set_id
        - job_id
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        target_configs:
          description: configuration properties for source datasource
          type: object
          properties:
            max_concurrent_target_connection:
              description: Maximum number of parallel connection that hyperscale can have with target datasource.
              type: integer
              format: int64
            parallelism_degree:
              description: Degree of parallelism for target database
              type: integer
              format: int64
        data_set_id:
          description: ID of the registered Data Set model.
          type: integer
          format: int64
        job_id:
          description: ID of the registered Job model.
          type: integer
          format: int64
      example:
        data_set_id: 1
        job_id: 1

    Load:
      title: Load
      type: object
      description: Load model containing information required to load files to a database table.
      required:
        - execution_id
        - job_id
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        execution_id:
          description: ID of the Execution model.
          type: integer
          format: int64
        job_id:
          description: ID of the registered Job model.
          type: integer
          format: int64
        load_metadata:
          description: Array of multiple objects, each object providing the information like sourceKey and file_info.
          type: array
          minItems: 1
          maxItems: 1000
          items:
            type: object
            required:
              - source_key
              - file_info
            properties:
              source_key:
                description: object providing the information like schema_name, table_name or file_name of the source datasource
                type: object
                additionalProperties:
                  type: string
              file_info:
                description: Array of multiple objects, each object providing the information like file path and file metadata.
                type: array
                minItems: 1
                maxItems: 10000
                items:
                  type: object
                  required:
                    - file_path
                    - file_metadata
                  properties:
                    file_path:
                      description: relative path of the masked file.
                      type: string
                      minLength: 1
                    file_metadata:
                      description: file metadata details like enclosure, delimiter and endOFRecord etc.
                      type: object
                      additionalProperties:
                        type: string

      example:
        execution_id: 1
        job_id: 1
        load_metadata:
          - source_key: {"schema_name": "SRC_TEST_SCHEMA_1",
                         "table_name": "SRC_TEST_TABLE_1"}
            file_info:
              - file_path: "/path/to/masked/file/to/be/loaded"
                file_metadata: {"delimiter": ",",
                                "enclosure": "'",
                                "endOfRecord": "\n"
                }
          - source_key: {"schema_name": "SRC_TEST_SCHEMA_2",
                         "table_name": "SRC_TEST_TABLE_2"}
            file_info:
              - file_path: "/path/to/masked/file/to/be/loaded"
                file_metadata: {"delimiter": ",",
                                "enclosure": "'",
                                "endOfRecord": "\n"
                }
    PostLoad:
      title: PostLoad
      type: object
      description: PostLoad model containing information required to execute post load processing.
      required:
        - execution_id
      properties:
        execution_id:
          description: ID of the Execution model.
          type: integer
          format: int64

      example:
        execution_id: 1

    LoadResponse:
      title: LoadResponse
      description: Load Response model.
      allOf:
        - $ref: '#/components/schemas/ExecutionStatus'
        - type: object
          required:
            - execution_id
            - job_id
          properties:
            execution_id:
              description: ID of the Execution model.
              type: integer
              format: int64
              readOnly: true
            job_id:
              description: ID of the registered Job model.
              type: integer
              format: int64
              readOnly: true
            start_time:
              description: The time when the load process is started.
              type: string
              readOnly: true
            end_time:
              description: The time when the load process is completed.
              type: string
              readOnly: true
            data_info:
              description: Array of multiple objects, each object providing the information like sourceKey and file_info.
              type: array
              minItems: 1
              maxItems: 10000
              items:
                type: object
                required:
                  - source_key
                  - unload_split_source
                properties:
                  source_key:
                    description: object providing the information like schema_name, table_name or file_name of the source datasource
                    type: object
                    additionalProperties:
                      type: string
                      readOnly: true
                  rows_loaded:
                    description: Total number of rows loaded to the database table.
                    type: integer
                    format: int64
                    readOnly: true
                  masked_file_path:
                    description: relative path of the target masked file.
                    type: string
                    minLength: 1
                    readOnly: true
                  status:
                    description: The status of the load process.
                    type: string
                    enum: [ CREATED, CANCELLED, FAILED, RUNNING, SUCCEEDED ]
                    readOnly: true
                  error:
                    description: Error details.
                    type: string
                    readOnly: true
      example:
        execution_id: 1
        job_id: 1
        status: "RUNNING"
        start_time: "2021-09-28T14:31:36.394504"
        end_time: "2021-09-28T24:10:06.590344"
        data_info:
          - source_key: {"schema_name": "SRC_TEST_SCHEMA_1",
                         "table_name": "SRC_TEST_TABLE_1"}
            rows_loaded: 100
            masked_file_path: "/path/to/target/masked/file/to/be/loaded"
          - source_key: {"schema_name": "SRC_TEST_SCHEMA_2",
                         "table_name": "SRC_TEST_TABLE_2"}
            rows_loaded: 100
            masked_file_path: "/path/to/target/masked/file/to/be/loaded"

    PostLoadResponse:
      title: Post Load Response
      type: object
      description: Post Load Response model.
      required:
        - status
        - start_time
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        execution_id:
          description: Post Load Response model.
          type: integer
          format: int64
        status:
          description: The status of the post load process.
          type: string
          enum: [ CANCELLED, FAILED, RUNNING, SUCCEEDED ]
          readOnly: true
        start_time:
          description: The time when the load process is started.
          type: string
          readOnly: true
        end_time:
          description: The time when the post load task component process is completed.
          type: string
          readOnly: true
        data_info:
          description: Array of multiple table set with corresponding task object details for post load task.
          type: array
          minItems: 1
          maxItems: 10000
          items:
            type: object
            properties:
              table_set:
                description: Array of multiple table set for post load task.
                type: array
                minItems: 1
                maxItems: 10000
                items:
                  type: string
              object_details:
                description: Array of multiple post load task object details, each component providing the information like total and processed.
                type: array
                minItems: 1
                maxItems: 10000
                items:
                  type: object
                  properties:
                    type:
                      description: Component type of Post Load Task Component Status.
                      type: string
                    total:
                      description: Total components of all Post Load Task Components.
                      type: integer
                      format: int64
                    processed:
                      description: Processed components of all Post Load Task Components.
                      type: integer
                      format: int64
                    status:
                      description: The status of the load process.
                      type: string
                      enum: [ CREATED, CANCELLED, FAILED, RUNNING, SUCCEEDED ]
                      readOnly: true
                    start_time:
                      description: The time when the load process is started.
                      type: string
                      readOnly: true
                    end_time:
                      description: The time when the post load task component process is completed.
                      type: string
                      readOnly: true
                    error:
                      description: Error details.
                      type: string
                      readOnly: true
        error:
          description: Error details.
          type: string
          readOnly: true
      example:
        execution_id: 1
        status: "SUCCESS"
        start_time: "2021-09-28T14:31:36.394504"
        end_time: "2021-09-28T24:10:06.590344"
        data_info:
          - table_set: [ "Table1","Table2" ]
          - object_details:
            - type: "Constraints"
              total: 20
              processed: 20
              status: "SUCCESS"
              start_time: "2021-09-28T14:31:36.394504"
              end_time: "2021-09-28T24:10:06.590344"
            - type: "Indexes"
              total: 10
              processed: 10
              status: "SUCCESS"
              start_time: "2021-09-28T14:31:36.394504"
              end_time: "2021-09-28T24:10:06.590344"
            - type: "Triggers"
              total: 5
              processed: 5
              status: "SUCCESS"
              start_time: "2021-09-28T14:31:36.394504"
              end_time: "2021-09-28T24:10:06.590344"

    ExecutionStatus:
      title: ExecutionStatus
      type: object
      description: Execution status update model.
      required:
        - status
      properties:
        status:
          description: The status of the load process.
          type: string
          enum: [ CREATED, CANCELLED, FAILED, RUNNING, SUCCEEDED ]
          readOnly: true
        error:
          description: Optional, error detail.
          type: string
          readOnly: true
      example:
        status: "FAILED"
        error: "Execution failed with unknown error"
        
    Api-Version:
      title: ApiVersion
      description: ApiVersion model for returning the version id.
      type: object
      properties:
        versionId:
          description: The VersionId is used to return the current version of service.
          type: string
          nullable: false
          minLength: 1
          maxLength: 50
      required: [versionId]
      example:
        versionId: "v3.0.0"
        
